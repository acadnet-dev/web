@model EditProblemViewModel

@{
  ViewData["Title"] = "Edit problem - " + Model.Name;
}

<section class="page-header -type-1 mt-90">
  <div class="container">
    <div class="page-header__content">
      <div class="row">
        <div class="col-auto">
          <div data-anim="slide-up delay-1">
            <h1 class="page-header__title">Edit problem - @Model.Name</h1>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<section class="layout-pt-md layout-pb-md">
  <div data-anim="slide-up delay-2" class="container">
    <div class="row y-gap-20 items-center justify-between pb-30">
      <div id="check_container">
      </div>
    </div>
    <div class="row y-gap-20 items-center justify-between pb-30">
      <div id="submission_result_container" style="display: none;">
        <h4>Submission details</h4>
        <p>Id: <span id="submission_id" class="fw-600"></span></p>
        <p>Status: <span id="submission_status" class="fw-600">Not polled yet</span></p>
      </div>
    </div>
    <div class="row y-gap-20 items-center justify-between pb-30">
      <div class="col-md-4">
        <input type="file" id="problem_files_pond" class="filepond" name="filepond" multiple data-allow-reorder="true"
          data-max-file-size="5MB" data-max-files="30">
      </div>
    </div>
  </div>
</section>

@section Styles {
  <!-- Filepond stylesheet -->
  <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
  <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
}

@section Scripts {
  <!-- FilePond -->
  <script src="https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js"></script>
  <script src="https://unpkg.com/filepond/dist/filepond.min.js"></script>
  <script src="https://unpkg.com/jquery-filepond/filepond.jquery.js"></script>

  <script>
    $.fn.filepond.registerPlugin(FilePondPluginFileValidateSize);

    const inputElement = document.querySelector('input[id="problem_files_pond"]');

    const checkProblemStructure = () => {
      $.ajax({
        url: '/problem/check?problemId=@Model.Id',
        type: 'GET',
        success: (response) => {
          $('#check_container').html(response);
        },
        error: (xhr, status, error) => {
          notie.alert({type: 'error', text: error, position: 'bottom'});
        }
      });
    };

    FilePond.create(inputElement, {
      server: {
        process: {
          url: '/problem/upload?bucketName=@Model.FilesBucketName',
          onerror: (response) => {
            notie.alert({type: 'error', text: response, position: 'bottom'});
            return response;
          }
        },
        revert: '/problem/remove',
        load: '/problem/load/',
        remove: (source, load, error) => {
          $.ajax({
            url: '/problem/remove',
            type: 'DELETE',
            data: source,
            contentType: 'text/plain',
            success: () => {
              load();
            },
            error: (xhr, status, error) => {
              error(error);
            }
          });
        }
      },
      files: [@foreach (var file in Model.Files)
    {
      <text>{source: '@file', options: {type: 'local' }},</text>
    }]
    });

    // event listeners to update the check container
    document.addEventListener('FilePond:loaded', (e) => {
      checkProblemStructure();
    });

    document.addEventListener('FilePond:processfile', (e) => {
      checkProblemStructure();
    });

    document.addEventListener('FilePond:updatefiles', (e) => {
      checkProblemStructure();
    });

    let checkInterval = null;

    // solution checker
    $("#check_container").on('click', '.check-solution', function () {
      var problemId = "@Model.Id";

      // hide the check button
      $(this).hide();

      $.ajax({
        url: '/problem/CheckSolution?problemId=' + problemId,
        type: 'GET',
        success: (response) => {
          $('#submission_result_container').show();
          $('#submission_id').text(response.submissionId);

          checkInterval = setInterval(() => {
            $.ajax({
              url: '/problem/CheckSubmission?submissionId=' + response.submissionId,
              type: 'GET',
              success: (response) => {
                $('#submission_status').text(response.status);

                if (response.status !== 'Pending') {
                  clearInterval(checkInterval);

                  // show errors if any
                  if (response.status === 'Failed') {
                    response.errors.forEach(error => {
                      $('#submission_result_container').append('<div><h6>' + error.type + '</h6><p style="white-space: pre-line">' + error.message + '</p></div>');
                    });
                  }

                  if (response.status === 'Passed') {
                    checkProblemStructure();
                  }
                }
              },
              error: (xhr, status, error) => {
                notie.alert({type: 'error', text: error, position: 'bottom'});
              }
            });
          }, 1000);
        },
        error: (xhr, status, error) => {
          notie.alert({type: 'error', text: error, position: 'bottom'});
        }
      });
    });
  </script>
}